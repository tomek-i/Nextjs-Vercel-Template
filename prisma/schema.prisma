generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.md"
}

generator svg {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ***********************************************************

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                 String        @id @default(cuid())
  name               String?
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  stripe_customer_id String?       @unique @db.VarChar
  display_name       String?       @db.VarChar
  subscription_id    String?
  subscription       Subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Subscription {
  id             String    @id @unique
  price_id       String
  status         String
  period_ends_at DateTime? @db.Timestamp(6)
  user           User[]

  @@map(name: "subscriptions")
}
